#nullable enable

//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.10.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace Setup {
    using ReusableLibraryCode;
    using ReusableLibraryCode.Checks;
    using System;
    using System.Collections.Generic;
    using Terminal.Gui;
    using Attribute = Terminal.Gui.Attribute;

    public partial class MainWindow {
        private EnvironmentProbe _probe;

        private ColorScheme _goodScheme;
        private ColorScheme _badScheme;

        /// <summary>
        /// The currently selected yaml file
        /// </summary>
        public string? YamlFile => tbDefaultYaml.Text.ToString();

        public MainWindow() {
            InitializeComponent();

            _goodScheme = new ColorScheme
            {
                Normal = new Attribute(Color.Green, ColorScheme.Normal.Background),
                HotNormal = new Attribute(Color.Green, ColorScheme.HotNormal.Background),
                Disabled = new Attribute(Color.Green, ColorScheme.Disabled.Background),
                Focus = new Attribute(Color.Green, ColorScheme.Focus.Background),
                HotFocus = new Attribute(Color.Green, ColorScheme.HotFocus.Background),
            };

            _badScheme = new ColorScheme
            {
                Normal = new Attribute(Color.Red, ColorScheme.Normal.Background),
                HotNormal = new Attribute(Color.Red, ColorScheme.HotNormal.Background),
                Disabled = new Attribute(Color.Red, ColorScheme.Disabled.Background),
                Focus = new Attribute(Color.Red, ColorScheme.Focus.Background),
                HotFocus = new Attribute(Color.Red, ColorScheme.HotFocus.Background),
            };

            // load the yaml and update system status
            tbDefaultYaml.Text = SetupSettings.YamlFile;
            _probe = new EnvironmentProbe(tbDefaultYaml.Text.ToString());
            SetCheckboxStates();

            tbDefaultYaml.TextChanged += TbDefaultYaml_TextChanged;

            RegisterEvents(cbYamlValid, "Deserialize Yaml",() => _probe.DeserializeYaml);
            RegisterEvents(cbRabbitMq, "Connect to RabbitMQ", () => _probe.RabbitMq);
            RegisterEvents(cbMongoDb, "Connect to MongoDb", () => _probe.MongoDb);
            RegisterEvents(cbRdmp, "Connect to RDMP", () => _probe.Rdmp);

            RegisterEvents(cbCohortExtractor, "CohortExtractor", () => _probe.CohortExtractor);

            btnBrowseForDefaultYaml.Clicked += BtnBrowseForDefaultYaml_Clicked;
            btnCheckInfrastructure.Clicked += BtnCheckInfrastructure_Clicked;
            btnCheckMicroservices.Clicked += BtnCheckMicroservices_Clicked;

            RegisterTry(btnTryRabbitMq, (p)=>p.ProbeRabbitMq());
            RegisterTry(btnTryRdmp, (p)=>p.ProbeRdmp());

        }


        private void RegisterTry(Button btn, Action<EnvironmentProbe> probeAction)
        {
            btn.Clicked += ()=>{
                _probe = new EnvironmentProbe(tbDefaultYaml.Text.ToString());
                probeAction(_probe);
                SetCheckboxStates();
                    };

        }

        private void RegisterEvents(CheckBox cb, string taskTitle, Func<CheckEventArgs?> resultGetter)
        {
            cb.KeyPress += (obj)=>{

                // only pay attention to keypresses if you have focus
                if (!cb.HasFocus)
                    return;

                // don't let user actually tick it themselves
                if (obj.KeyEvent.Key == Key.Enter || obj.KeyEvent.Key == Key.Space)
                {
                    obj.Handled = true;

                    var result = resultGetter();

                    if(result == null)
                    {
                        MessageBox.Query(taskTitle, "Task not yet attempted", "Ok");
                    }
                    else
                    if (result.Result == CheckResult.Success)
                    {
                        result.GetSummary(out var title, out var body, out _, out _);
                        MessageBox.Query(title,body, "Ok");
                    }
                    else
                    {

                        result.GetSummary(out var title, out var body, out _, out _);

                        if(result.Ex != null)
                        {
                            body += ExceptionHelper.ExceptionToListOfInnerMessages(result.Ex);
                        }

                        MessageBox.ErrorQuery(taskTitle, body, "Ok");                        
                    }
                }
            };
        }


        private void BtnCheckInfrastructure_Clicked()
        {
            _probe.CheckInfrastructure();
            SetCheckboxStates();
        }
        private void BtnCheckMicroservices_Clicked()
        {
            _probe.CheckMicroservices();
            SetCheckboxStates();
        }

        private void SetCheckboxStates()
        {
            SetState(cbYamlValid, _probe.DeserializeYaml);
            SetState(cbRabbitMq, _probe.RabbitMq);
            SetState(cbMongoDb, _probe.MongoDb);
            SetState(cbRdmp, _probe.Rdmp);

            SetState(cbCohortExtractor, _probe.CohortExtractor);
        }

        private void SetState(CheckBox cb, CheckEventArgs? result)
        {
            cb.Checked = result != null && result.Result == CheckResult.Success;

            if (result == null)
            {
                // if we haven't tried it yet use the default colors
                cb.ColorScheme = ColorScheme;
            }
            else
            {
                cb.ColorScheme = result.Result == CheckResult.Success ? _goodScheme : _badScheme;
            }
            
        }

        private void TbDefaultYaml_TextChanged(NStack.ustring obj)
        {
            var path = tbDefaultYaml.Text.ToString();
            SetupSettings.YamlFile = path ?? "";
            _probe = new EnvironmentProbe(path);
            SetCheckboxStates();
        }

        private void BtnBrowseForDefaultYaml_Clicked()
        {
            var ofd = new OpenDialog("Yaml Config File", "Navigate to the config file for your services", new List<string> { ".yaml" });
            Application.Run(ofd);

            if (!ofd.Canceled && !string.IsNullOrEmpty(ofd.FilePath.ToString()))
            {
                tbDefaultYaml.Text = ofd.FilePath;
                _probe = new EnvironmentProbe(tbDefaultYaml.Text.ToString());
            }
        }
    }
}
