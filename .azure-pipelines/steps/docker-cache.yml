---
parameters:
    os:
    language:

steps:
    - task: Bash@3
      displayName: Set glob for compose files
      inputs:
          targetType: "inline"
          script: |
              compose_glob=$(echo .azure-pipelines/docker-compose/'*'${{ parameters.os }}'*'${{ parameters.language }}'*'.yml)
              set -f
              echo $compose_glob
              echo "##vso[task.setvariable variable=compose_glob]$compose_glob"
    - task: Cache@2
      displayName: Use docker iamges cache
      inputs:
          key: "docker | $(compose_glob) | .azure-pipelines/docker-compose/docker-cache-key.txt"
          path: $(DOCKER_CACHE_DIR)
          cacheHitVar: DOCKER_CACHE_RESTORED
    - task: Bash@3
      displayName: Load docker images if cached
      condition: and(not(canceled()), eq(variables.DOCKER_CACHE_RESTORED, 'true'))
      inputs:
          targetType: "inline"
          script: docker load < $(DOCKER_CACHE_DIR)/cache.tar
    - task: Bash@3
      displayName: Pull newer images if available
      inputs:
          targetType: "inline"
          script: >
              :
              && docker_images=$(grep -h "image:" $(compose_glob) | tr -d ' ' | cut -d: -f2- | sort -u)
              && echo $docker_images
              && echo "##vso[task.setvariable variable=docker_images]$docker_images"
              && for i in $docker_images; do docker pull $i | tee dotnet-docker-pull.log ; done
              && newer=$(grep -c 'Downloaded newer image' dotnet-docker-pull.log) || true
              && if [ $newer -ne "0" ]; then echo "##vso[task.setvariable variable=pulled_newer]1" ; fi
    - task: Bash@3
      displayName: Save docker images to cache
      condition: and(not(canceled()), not(failed()))
      inputs:
          targetType: "inline"
          script: |
              # If we didn't start with a cache, or if we pulled newer images
              if
                  false \
                  || [[ "${{ variables.DOCKER_CACHE_RESTORED }}" -ne "true" ]] \
                  || [[ "$(pulled_newer)" == "1" ]]
              then
                  mkdir -p $(DOCKER_CACHE_DIR)
                  docker save $(docker_images) > $(DOCKER_CACHE_DIR)/cache.tar
                  # NOTE(rkm 2020-01-09) Modifies the cache key so that the tar is updated
                  echo foo > .azure-pipelines/docker-compose/docker-cache-key.txt
              fi
