---
parameters:
    vmImage:
    os:

jobs:
    - job: dotnet_tests
      displayName: Dotnet Tests
      pool:
          vmImage: ${{ parameters.vmImage }}
      steps:
          - task: UseDotNet@2
            displayName: Use .NET Core SDK 3.1
            inputs:
                packageType: sdk
                version: 3.1.x
                installationPath: $(Agent.ToolsDirectory)/dotnet
          - task: UseDotNet@2
            displayName: Use .NET Core Runtime 2.2
            inputs:
                packageType: runtime
                version: 2.2.x
                installationPath: $(Agent.ToolsDirectory)/dotnet
          - task: Cache@2
            displayName: Cache NuGet packages
            inputs:
                key: 'nuget | "$(Agent.OS)" | **/*.csproj'
                path: $(NUGET_PACKAGES)
          - task: Cache@2
            displayName: Cache tesseract data
            inputs:
                key: 'tessdata | "$(Agent.OS)"'
                restoreKeys: |
                    tessdata
                path: $(TESS_DATA_DIR)
                cacheHitVar: TESS_CACHE_RESTORED
          - task: Bash@3
            displayName: Download tessdata if cache not restored
            inputs:
                targetType: "inline"
                script: |
                    : \
                    && mkdir -p $(TESS_DATA_DIR) \
                    && curl -L \
                        https://github.com/tesseract-ocr/tessdata/raw/master/eng.traineddata \
                        > $(Pipeline.Workspace)/tessdata/eng.traineddata
            condition: eq(variables.TESS_CACHE_RESTORED, 'false')
          - ${{ if eq( parameters.os, 'linux' ) }}:
                - template: ../steps/docker-dotnet.yml
          - ${{ if eq( parameters.os, 'win' ) }}:
                - template: ./patch-mongodb-windows.yml
          - task: Bash@3
            displayName: Start MongoDB replication
            inputs:
                targetType: "inline"
                script: |
                    timeout 1m bash -c "until /usr/bin/mongo --eval 'db.stats()' &> /dev/null ; do sleep 1 && echo -n . ; done"
                    mongo --eval 'rs.initiate()'
          - template: ../steps/rdmp-setup.yml
            parameters:
                os: parameters.os
          - task: Bash@3
            displayName: Run Dotnet tests
            inputs:
                filePath: "./meta/run_dotnet_tests.sh"
                failOnStderr: true

    - job: java_tests
      displayName: Java Tests
      pool:
          vmImage: ${{ parameters.vmImage }}
      steps:
          - task: JavaToolInstaller@0
            displayName: Use Java 11
            inputs:
                versionSpec: "11"
                jdkArchitectureOption: "x64"
                jdkSourceOption: "PreInstalled"
          - task: Cache@2
            displayName: Cache Maven local repo
            inputs:
                key: 'maven | "$(Agent.OS)" | **/pom.xml'
                restoreKeys: |
                    maven | "$(Agent.OS)"
                    maven
                path: $(MAVEN_CACHE_FOLDER)
          - task: Cache@2
            displayName: Use docker iamges cache
            inputs:
                key: 'docker | "$(Agent.OS)" | meta/docker-compose-java.yml | v2'
                path: $(Pipeline.Workspace)/docker
                cacheHitVar: DOCKER_CACHE_RESTORED
          # - task: Bash@3
          #   displayName: Load docker images if cached
          #   inputs:
          #       targetType: "inline"
          #       script: docker load < $(Pipeline.Workspace)/docker/cache-java-$(Agent.OS).tar
          #   condition: and(not(canceled()), eq(variables.DOCKER_CACHE_RESTORED, 'true'))
          - task: Bash@3
            displayName: Pull newer images if available
            inputs:
                targetType: "inline"
                script: >
                    :
                    && docker_images=$(grep "image:" meta/docker-compose-java.yml | tr -d ' ' | cut -d: -f2-)
                    && echo $docker_images
                    && echo "##vso[task.setvariable variable=docker_images]$docker_images"
                    && for i in $docker_images; do docker pull $i | tee java-docker-pull.log ; done
                    && newer=$(grep -c 'Downloaded newer image' java-docker-pull.log) || true
                    && if [ $newer -ne "0" ]; then echo "##vso[task.setvariable variable=pulled_newer]1" ; fi
          - task: Bash@3
            displayName: Save docker images to cache
            condition: and(not(canceled()), not(failed()))
            inputs:
                targetType: "inline"
                script: |
                    # If we didn't start with a cache, or if we pulled newer images
                    if
                        false \
                        || [[ "${{ variables.DOCKER_CACHE_RESTORED }}" -ne "true" ]] \
                        || [[ "$(pulled_newer)" == "1" ]]
                    then
                        mkdir -p $(Pipeline.Workspace)/docker
                        docker save $(docker_images) > $(Pipeline.Workspace)/docker/cache-java-$(Agent.OS).tar
                    fi
          - task: DockerCompose@0
            displayName: Run containers for java tests
            inputs:
                containerregistrytype: "Container Registry"
                dockerComposeFile: "./meta/docker-compose-java.yml"
                action: "Run services"
          - task: Bash@3
            displayName: Run Java tests
            inputs:
                filePath: "./meta/run_java_tests.sh"
                # TODO(rkm 2020-12-11) See if we can silence the current bogus stderr output (log4j warning & SMI_LOGS_ROOT)
                failOnStderr: false
